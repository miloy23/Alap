<!DOCTYPE html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <style>
      #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, 300px);
        grid-auto-rows: 300px;
      }

      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body>
    <div id="video-grid"></div>

    <script type="module" defer>
      var port = "<%= port %>";
      var roomID = "<%= roomID %>";
      import { io } from "https://cdn.socket.io/4.5.2/socket.io.esm.min.js";
      var myPeer = new Peer(undefined, {
        host: "/",
        port: port,
        path: "/peerjs",
      });
      let socket = io();
      const videoGrid = document.getElementById("video-grid");
      const myVideo = document.createElement("video");
      myVideo.muted = true;
      const peers = {};
      navigator.mediaDevices
        .getUserMedia({
          video: true,
          audio: false,
        })
        .then((stream) => {
          addVideoStream(myVideo, stream);

          myPeer.on("call", (call) => {
            call.answer(stream);
            const video = document.createElement("video");
            call.on("stream", (userVideoStream) => {
              addVideoStream(video, userVideoStream);
            });
          });

          socket.on("user-connected", (userId) => {
            connectToNewUser(userId, stream);
          });
        });

      socket.on("user-disconnected", (userId) => {
        console.log("user quit");
        if (peers[userId]) peers[userId].close();
      });

      myPeer.on("open", (id) => {
        socket.emit("join-room", roomID, id);
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on("close", () => {
          video.remove();
        });

        peers[userId] = call;
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener("loadedmetadata", () => {
          video.play();
        });
        videoGrid.append(video);
      }
    </script>
  </body>
</html>
